#!/usr/bin/env php
<?php
//==================
//Data Loader
//==================

include "../inc/main.php";

$shortopts  = "";
$longopts  = array(
"path:",
"release:",
"format:"
);

class CMD{
public $name;
public $commands;
public $info;
}

class PKG{
public $code;
public $description;
public $sourcefile;
public $sourcedir;
public $unpack="";
public $configure;
public $build;
public $install;
public $dependances;
public $patches;
public $addons;

};



$options = getopt($shortopts, $longopts);
//var_dump($options);
/*
$url="http://umvirt.com/linux/packages";
$format="json";
$release="0.1";
*/



$path=@$options["path"];
$format=@$options["format"];
$release=@$options["release"];
$outdir="../tmp/$release";

echo "UmVirt LFS Packages data loader\n\n";

if(!$path | !$format | !$release){
echo "USAGE:\n\n";
echo "        $argv[0] --path=<dump_path> --release=<release> --format=<xml|json>\n\n";
exit;
}

echo "Packages path: $path\n";
echo "Release: $release\n";
echo "Format: $format\n\n";



//Commands proccessing
echo "Reading commands info... ";
$csfile=@file_get_contents("$path/commands.$format");
if(strlen($csfile)){

if($format=="xml"){
$xcommands=simplexml_load_string ($csfile);
//var_dump($xpackages->commands->command);
$c=0;

$xmlIterator = new SimpleXMLIterator($xcommands->commands->asXML());
for( $xmlIterator->rewind(); $xmlIterator->valid(); $xmlIterator->next() ) {
$commands[]=$xmlIterator->current()->__toString();
//break;
}
}
if($format=="json"){
$jcommands=json_decode($csfile);
//var_dump($xpackages->commands->command);
$c=0;
foreach ($jcommands->commands as $jcommand){
$commands[]=$jcommand;
}



}

//file_put_contents($outdir."/packages.".$format, $packages);
echo "Ok\n\n";
}else{
echo "Error\n\n";
exit;
}


//var_dump($commands);



//exit;

//Packages proccessing
echo "Reading packages info... ";
$psfile=@file_get_contents("$path/packages.$format");
if(strlen($psfile)){

if($format=="xml"){
$xpackages=simplexml_load_string ($psfile);
//var_dump($xpackages->packages->package);
$c=0;

$xmlIterator = new SimpleXMLIterator($xpackages->packages->asXML());
for( $xmlIterator->rewind(); $xmlIterator->valid(); $xmlIterator->next() ) {
$packages[]=$xmlIterator->current()->__toString();
//break;
}
}
if($format=="json"){
$jpackages=json_decode($psfile);
//var_dump($xpackages->packages->package);
$c=0;

foreach ($jpackages->packages as $jpackage){
$packages[]=$jpackage;
}


}
//file_put_contents($outdir."/packages.".$format, $packages);
echo "Ok\n\n";
}else{
echo "Error\n\n";
exit;
}


//var_dump($packages,$commands);
//exit;

echo "Creating release...";


$sql[]="insert into releases (`release`) value (\"$release\")";
$sql[]="select @@identity";
$db->execute($sql);
$release_id=$db->dataset[0]['@@identity'];

if($release_id){
echo "Ok\n\n";
}else{
echo "Error\n\n";
exit;
}



foreach($commands as $command){
$cfilename="$path/commands/$command.$format";
$cfile=file_get_contents($cfilename);
echo "Processing file \"$cfilename\"...\n";
if(strlen($cfile)){


if($format=="xml"){
$xcommand=simplexml_load_string ($cfile);
$obj=new CMD();

$obj->name=$xcommand->name->__toString();
$obj->commands=base64_decode($xcommand->commands->__toString());
$obj->info=base64_decode($xcommand->info->__toString());


$objs[]=$obj;

}

}

if($format=="json"){
$jcommand=json_decode ($cfile);
$obj=new CMD();

$obj->name=$jcommand->name;
$obj->commands=base64_decode($jcommand->commands);
$obj->info=base64_decode($jcommand->info);


$objs[]=$obj;

}





}




echo "Loaded ".count($objs)."/".count($commands)." commands.\n\n";


echo "Creating commands...\n\n";


foreach($objs as $obj){


echo "Creating command \"$obj->name\"... ";
$sql=array();
$sql[]="insert into commands (name,`release`,commands,info)
values (
\"$obj->name\",
\"$release_id\",
\"".addslashes($obj->commands)."\",
\"".addslashes($obj->info)."\"
)";


$sql[]="select @@identity";
$db->execute($sql);
$obj->id=$db->dataset[0]['@@identity'];


if($obj->id){
echo "Ok\n";
}else{
echo "Error\n";
exit;
}

}





//exit;


$objs=array();

foreach($packages as $package){
$pfilename="$path/packages/$package.$format";
$pfile=file_get_contents($pfilename);
echo "Processing file \"$pfilename\"...\n";
if(strlen($pfile)){


if($format=="xml"){
$xpackage=simplexml_load_string ($pfile);
$obj=new PKG();

$obj->code=$xpackage->code->__toString();
$obj->description=base64_decode($xpackage->description->__toString());
$obj->sourcefile=$xpackage->sourcefile->__toString();
$obj->sourcedir=$xpackage->sourcedir->__toString();
$obj->configure=base64_decode($xpackage->configure->__toString());
$obj->build=base64_decode($xpackage->build->__toString());
$obj->install=base64_decode($xpackage->install->__toString());
$obj->addons=array();
$obj->patches=array();
$obj->dependances=array();
$obj->nestings=array();



if(@$xpackage->unpack->__toString()){
$obj->unpack=base64_decode($xpackage->unpack->__toString());
}

//addons
$xmlIterator2 = new SimpleXMLIterator($xpackage->addons->asXML());
for( $xmlIterator2->rewind(); $xmlIterator2->valid(); $xmlIterator2->next() ) {
$obj->addons[]=$xmlIterator2->current()->__toString();
}

//patches
$xmlIterator2 = new SimpleXMLIterator($xpackage->patches->asXML());
for( $xmlIterator2->rewind(); $xmlIterator2->valid(); $xmlIterator2->next() ) {
$obj->patches[]=array(
"filename"=>$xmlIterator2->current()->filename->__toString(),
"mode"=>$xmlIterator2->current()->mode->__toString()
);
}

//dependaces
$xmlIterator2 = new SimpleXMLIterator($xpackage->dependances->asXML());
$w=0;
for( $xmlIterator2->rewind(); $xmlIterator2->valid(); $xmlIterator2->next() ) {
$w++;
$obj->dependances[]=array("code"=>$xmlIterator2->current()->code->__toString(), "weight"=>$w);
}


//nestings
$xmlIterator2 = new SimpleXMLIterator($xpackage->nestings->asXML());
for( $xmlIterator2->rewind(); $xmlIterator2->valid(); $xmlIterator2->next() ) {
$obj->nestings[]=$xmlIterator2->current()->__toString();
}



$objs[]=$obj;


//var_dump($xpackage, $obj);
//break;

}

if($format=="json"){
$jpackage=json_decode($pfile);
$obj=new PKG();

$obj->code=$jpackage->code;
$obj->description=base64_decode($jpackage->description);
$obj->sourcefile=$jpackage->sourcefile;
$obj->sourcedir=$jpackage->sourcedir;
$obj->configure=base64_decode($jpackage->configure);
$obj->build=base64_decode($jpackage->build);
$obj->install=base64_decode($jpackage->install);
$obj->addons=array();
$obj->patches=array();
$obj->dependances=array();
$obj->nestings=array();


if(@$jpackage->unpack){
$obj->unpack=base64_decode($jpackage->unpack);
}

foreach ($jpackage->addons as $jaddon){
$obj->addons[]=$jaddon;
}

foreach ($jpackage->patches as $jpatch){
$obj->patches[]=array("filename"=>$jpatch->filename,"mode"=>$jpatch->mode);
}

$w=0;
foreach ($jpackage->dependances as $jdep){
$w++;
$obj->dependances[]=array("code"=>$jdep->code,"weight"=>$w);
}


foreach ($jpackage->nestings as $jn){
$obj->nestings[]=$jn;
}


//var_dump($jpackage,$obj);
//exit;

$objs[]=$obj;


}
}


}

echo "Loaded ".count($objs)."/".count($packages)." packages.\n\n";


echo "Creating packages...\n\n";


foreach($objs as $obj){


echo "Creating package \"$obj->code\"... ";
$sql=array();
$sql[]="insert into packages (code,`description`,`release`,sourcefile,sourcedir,unpack,configure,build,install)
values (
\"$obj->code\",
\"".addslashes($obj->description)."\",
\"$release_id\",
\"$obj->sourcefile\",
\"$obj->sourcedir\",
\"".addslashes($obj->unpack)."\",
\"".addslashes($obj->configure)."\",
\"".addslashes($obj->build)."\",
\"".addslashes($obj->install)."\"
)";


$sql[]="select @@identity";
$db->execute($sql);
$obj->id=$db->dataset[0]['@@identity'];

$pkg_ids[$obj->code]=$obj->id;

if($obj->id){
echo "Ok\n";
}else{
echo "Error\n";
exit;
}



}


echo "\nCreating dependances:\n\n";
foreach($objs as $obj){
echo "Creating dependances for package \"$obj->code\"... ";
$c=0;
$sql=array();
foreach($obj->dependances as $dep){
$c++;
$sql[]="insert into dependances (package,dependance,weight) values (
".$obj->id.",
".$pkg_ids[$dep['code']].",
$c)";
$db->execute($sql);
//var_dump($db->error);
}


if(!$db->error){
echo "Ok\n";
}else{
echo "Error: $db->error\n";
exit;
}

}

echo "\nCreating patches:\n\n";
foreach($objs as $obj){
echo "Creating patches for package \"$obj->code\"... ";

$sql=array();
foreach($obj->patches as $patch){
$c++;
$sql[]="insert into patches (package,filename,mode) values (
".$obj->id.",
\"".$patch['filename']."\",\"".$patch['mode']."\")";
$db->execute($sql);
//var_dump($db->error);
}

if(!$db->error){
echo "Ok\n";
}else{
echo "Error: $db->error\n";
exit;
}

}



echo "\nCreating addons:\n\n";
foreach($objs as $obj){
echo "Creating addons for package \"$obj->code\"... ";

$sql=array();
foreach($obj->addons as $addon){
$c++;
$sql[]="insert into addons (package,filename) values (
".$obj->id.",
\"".$addon."\")";
$db->execute($sql);
//var_dump($db->error);
}

if(!$db->error){
echo "Ok\n";
}else{
echo "Error: $db->error\n";
exit;
}

}


//var_dump($release_id);






echo "\nCreating nestings:\n\n";
foreach($objs as $obj){
echo "Creating nestings for package \"$obj->code\"... ";
$c=0;
$sql=array();
foreach($obj->nestings as $dep){
$sql[]="insert into nestings (parent,child) values (
".$obj->id.",
".$pkg_ids[$dep].")";
$db->execute($sql);
//var_dump($db->error);
}


if(!$db->error){
echo "Ok\n";
}else{
echo "Error: $db->error\n";
exit;
}

}




