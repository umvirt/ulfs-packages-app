#!/usr/bin/env php
<?php
/**
 * ULFS Packages Web-Application
 *
 * Local packages installation scripts generator
 */

//define getopt options
$shortopts  = "";
$longopts  = array(
    "url:",
    "release:",
    "format:"
    );

//parse command line arguments
$options = getopt($shortopts, $longopts);

//instance URL
$url=@$options["url"];
//data format
$format=@$options["format"];
//release
$release=@$options["release"];

//output directory path
$outdir="../tmp/$release";

echo "UmVirt LFS Packages local packages installation scripts generator\n\n";

if(!$url | !$format | !$release)
{
    echo "USAGE:\n\n";
    echo "        $argv[0] --url=<instance_url> --release=<release> --format=<xml|json>\n\n";
    exit;
}

//print arguments
echo "Instance URL: $url\n";
echo "Release: $release\n";
echo "Format: $format\n\n";

//Create directories
mkdir($outdir);
mkdir($outdir."/scripts/");
echo "Downloading packages info... ";
//load packages data
$packages=file_get_contents("$url/packages/$format/$release");

//if packages data is available
if(strlen($packages))
{
    //save it
    file_put_contents($outdir."/packages.".$format, $packages);
    echo "Ok\n\n";

//if packages data is not available
}else{
    //exit
    echo "Error\n\n";
    exit;
}

echo "Generating scripts...\n";

//if format is XML
if($format=="xml")
{

    //open packages document
    $xpackages=simplexml_load_string ($packages);

    //init packages counter
    $c=0;

    //prepare iterator
    $xmlIterator = new SimpleXMLIterator($xpackages->packages->asXML());

    //proccess each package
    for( $xmlIterator->rewind(); $xmlIterator->valid(); $xmlIterator->next() )
    {
        //get current object
        $package=$xmlIterator->current();

        echo "Generating script for package \"$package\"... ";

        //load package data
        $data=file_get_contents("$url/packages/$release/$package/localinstall");

        //if package data was received
        if(strlen($data))
        {
            //save package data
            file_put_contents($outdir."/scripts/$package.sh",$data);


            $c++;

            //increase packages counter
            echo "Ok\n";

            //sleep if needed
            if(@$config['dumpsleep'])
            {
                //sleep
                sleep($config['dumpsleep']);
            }
         //if package data not received
        }else{
            //exit
            echo "Error\n";
            break;
        }
    }
}

//if format is JSON
if($format=="json")
{
    //open packages document
    $jpackages=json_decode($packages);

    //init packages counter
    $c=0;

    //proccess each package
    foreach($jpackages->packages as $package)
    {
        echo "Generating script for package \"$package\"... ";

        //load package data
        $data=file_get_contents("$url/packages/$release/$package/localinstall");

        //if package data was received
        if(strlen($data))
        {
            //save package data
            file_put_contents($outdir."/scripts/$package.sh",$data);

            //increase packages counter
            $c++;

            echo "Ok\n";

            //sleep if needed
            if(@$config['dumpsleep'])
            {
                //sleep
                sleep($config['dumpsleep']);
            }
         //if package data not received
        }else{
            //exit
            echo "Error\n";
            break;
        }
    }
}

//if format is XML
if($format=="xml")
{
    //count packages in xml document
    $count=$xpackages->packages->children()->count();
}
//if format is JSON
if($format=="json")
{
    //count packages in json document
    $count=count($jpackages->packages);
}

//If imported packages count less than defined in packages document
if($c<$count)
{
    //assign aborted status
    $status="aborted";
}else{
    //assign comlited status
    $status="completed";
}
echo "\nGeneration $status: $c/$count packages.\n\n";

/*
#-------------
echo "Dumping commands...\n";

if($format=="xml"){
$xcommands=simplexml_load_string ($commands);
//var_dump($xcommands->commands->command);
$c=0;

$xmlIterator = new SimpleXMLIterator($xcommands->commands->asXML());
for( $xmlIterator->rewind(); $xmlIterator->valid(); $xmlIterator->next() ) {
$command=$xmlIterator->current();

echo "Dumping command \"$command\"... ";
//foreach($xpackages->packages as $package){
$data=file_get_contents("$url/assistant/$format/$release/$command");
if(strlen($data)){
file_put_contents($outdir."/commands/$command.$format",$data);
$c++;
echo "Ok\n";
sleep(1);
}else{
echo "Error\n";
break;
}
}
}

if($format=="json"){
$jcommands=json_decode($commands);
$c=0;

//echo $packages;
//var_dump($jpackages);
foreach($jcommands->commands as $command){
echo "Dumping command \"$command\"... ";
//foreach($xpackages->packages as $package){
$data=file_get_contents("$url/assistant/$format/$release/$command");
if(strlen($data)){
file_put_contents($outdir."/commands/$command.$format",$data);
$c++;
echo "Ok\n";
sleep(1);
}else{
echo "Error\n";
break;
}
}
}

if($format=="xml"){
$count=$xcommands->commands->children()->count();
}
if($format=="json"){
$count=count($jcommands->commands);
}

if($c<$count){
$status="aborted";
}else{
$status="completed";
}
echo "\nDump $status: $c/$count commands.\n\n";
*/



